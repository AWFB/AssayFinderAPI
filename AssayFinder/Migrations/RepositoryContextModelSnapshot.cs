// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace AssayFinder.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Assay", b =>
                {
                    b.Property<Guid>("AssayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssayId");

                    b.Property<string>("AccreditationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccreditationScheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoCommentAddedToReports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostOfTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EqaSchemeForTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccreditted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPerformanceAcceptable")
                        .HasColumnType("bit");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeditechCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NpexAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("PerformanceOutcomesIfNotSatisafactory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreAnalyticalAndStorageConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RangesApplicableToPaeds")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleVolume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportRequirments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurnAroundTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssayId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Assays");

                    b.HasData(
                        new
                        {
                            AssayId = new Guid("432c59c0-9d75-4fb3-880f-03b5ef067780"),
                            AccreditationNumber = "N/A",
                            AccreditationScheme = "N/A",
                            AutoCommentAddedToReports = "No Comment",
                            Comments = "",
                            ContactName = "Monty Scott",
                            ContactNumber = "01603 287945",
                            CostOfTest = "£5",
                            CreatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5735),
                            Discipline = "Biochemistry",
                            EmailAddress = "a.c@person.com",
                            EqaSchemeForTest = "DEQAS",
                            IsAccreditted = false,
                            IsPerformanceAcceptable = true,
                            LaboratoryId = new Guid("a9f068c1-972a-4708-a52f-dd1edaa6abb6"),
                            LastUpdatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5786),
                            MeditechCode = "125VITD",
                            NameOfTest = "1,25-dihydroxyvitamin D",
                            NpexAvailable = true,
                            PerformanceOutcomesIfNotSatisafactory = "",
                            PreAnalyticalAndStorageConditions = "Fridged",
                            RangesApplicableToPaeds = false,
                            ReferenceRange = "55 - 139 pmol/L",
                            SampleType = "Serum",
                            SampleVolume = "500ul",
                            TransportRequirments = "First class post",
                            TurnAroundTime = "4 Weeks"
                        },
                        new
                        {
                            AssayId = new Guid("87bf7ac9-0921-4d42-92f9-4a4f38252fba"),
                            AccreditationNumber = "N/A",
                            AccreditationScheme = "N/A",
                            AutoCommentAddedToReports = "No Comment",
                            Comments = "",
                            ContactName = "Monty Scott",
                            ContactNumber = "01603 287945",
                            CostOfTest = "£28.00",
                            CreatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5793),
                            Discipline = "Biochemistry",
                            EmailAddress = "a.c@person.com",
                            EqaSchemeForTest = "Sample exchange",
                            IsAccreditted = false,
                            IsPerformanceAcceptable = true,
                            LaboratoryId = new Guid("a9f068c1-972a-4708-a52f-dd1edaa6abb6"),
                            LastUpdatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5795),
                            MeditechCode = "BONE ALP",
                            NameOfTest = "Bone specific ALP",
                            NpexAvailable = true,
                            PerformanceOutcomesIfNotSatisafactory = "",
                            PreAnalyticalAndStorageConditions = "Frozen",
                            RangesApplicableToPaeds = true,
                            ReferenceRange = "See report",
                            SampleType = "Serum",
                            SampleVolume = "500ul",
                            TransportRequirments = "First class post",
                            TurnAroundTime = "6 Weeks"
                        },
                        new
                        {
                            AssayId = new Guid("f5670c49-8193-4d42-9a9d-9deaf81851d8"),
                            AccreditationNumber = "8494",
                            AccreditationScheme = "UKAS",
                            AutoCommentAddedToReports = "No Comment",
                            Comments = "",
                            ContactName = "Kev Blue",
                            ContactNumber = "0114 271 5552",
                            CostOfTest = "",
                            CreatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5803),
                            Discipline = "Immunology",
                            EmailAddress = "a.c@person.com",
                            EqaSchemeForTest = "Sample exchange",
                            IsAccreditted = true,
                            IsPerformanceAcceptable = true,
                            LaboratoryId = new Guid("bcc94fb7-df87-447e-a563-41255cf856c4"),
                            LastUpdatedAt = new DateTime(2023, 6, 24, 22, 34, 3, 846, DateTimeKind.Local).AddTicks(5805),
                            MeditechCode = "C3NF",
                            NameOfTest = "C3 Nephritic Factor (C3NEF)",
                            NpexAvailable = true,
                            PerformanceOutcomesIfNotSatisafactory = "",
                            PreAnalyticalAndStorageConditions = "Frozen",
                            RangesApplicableToPaeds = false,
                            ReferenceRange = "Negative",
                            SampleType = "Serum",
                            SampleVolume = "2mL",
                            TransportRequirments = "DX Address: Protein Reference Unit, PO Box 894, Sheffield, S5 7YT. DX Number: 6261402",
                            TurnAroundTime = "10 working days"
                        });
                });

            modelBuilder.Entity("Entities.Models.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LaboratoryId");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9f068c1-972a-4708-a52f-dd1edaa6abb6"),
                            Address = "1 Hospital Way, Liverpool, LV1 2BZ",
                            ContactEmail = "lab@PineWheat.com",
                            ContactName = "William Riker",
                            ContactNumber = "0112 587 326",
                            LaboratoryName = "PineWheat Trust"
                        },
                        new
                        {
                            Id = new Guid("bcc94fb7-df87-447e-a563-41255cf856c4"),
                            Address = "1 Caring Street, Derby, DE1 9BZ",
                            ContactEmail = "lab@BirchBarley.com",
                            ContactName = "Bev Crusher",
                            ContactNumber = "01332 222 123",
                            LaboratoryName = "BirchBarley Trust"
                        });
                });

            modelBuilder.Entity("Entities.Models.Assay", b =>
                {
                    b.HasOne("Entities.Models.Laboratory", "Laboratory")
                        .WithMany("Assays")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Entities.Models.Laboratory", b =>
                {
                    b.Navigation("Assays");
                });
#pragma warning restore 612, 618
        }
    }
}
